--- openstack-helm-images/openstack/loci/build.sh	2025-05-14 22:30:39.132124391 +0900
+++ patches/openstack-helm-images/openstack/loci/build.sh	2025-05-14 22:24:42.686484265 +0900
@@ -1,7 +1,8 @@
-#!/bin/bash
+#!/bin/bash -x
 export PYTHONUNBUFFERED=1
 SCRIPT=`realpath $0`
 SCRIPT_DIR=`dirname ${SCRIPT}`
+
 ## Only build from main folder
 cd ${SCRIPT_DIR}/../..
 
@@ -67,24 +68,31 @@
     fi
     build_args="${build_args} --build-arg PROJECT=${projectname}"
 
-    #Add PROJECT_REF argument if <project>_project_ref env var is defined
-    #Or, use default openstack branch reference "OPENSTACK_VERSION"
+    # If PROJECT_REF is not set,
+    # Add PROJECT_REF argument if <project>_project_ref env var is defined
+    # Or, use default openstack branch reference "OPENSTACK_VERSION"
     local this_project_ref="${project}_project_ref"
-    if [[ -n ${!this_project_ref} ]]; then
-      PROJECT_REF=${!this_project_ref}
-    else
-      PROJECT_REF=${OPENSTACK_VERSION}
+    if [[ -z ${PROJECT_REF} ]]; then
+      if [[ -n ${!this_project_ref} ]]; then
+        PROJECT_REF=${!this_project_ref}
+      else
+        PROJECT_REF=${OPENSTACK_VERSION}
+      fi
     fi
     #Remove stable/ from the tags, as '/' should not be in tag, and
     #'stable' doesn't bring any extra information
-    TAGGED_PROJECT_REF=${PROJECT_REF/stable\//}
+    TAGGED_PROJECT_REF=${PROJECT_REF#*/}
     build_args="${build_args} --build-arg PROJECT_REF=${PROJECT_REF}"
 
-
     #Add PROJECT_REPO argument if <project>_project_repo env var is defined
     local this_project_repo="${project}_project_repo"
-    if [[ -n ${!this_project_repo} ]]; then
-      build_args="${build_args} --build-arg PROJECT_REPO=${!this_project_repo}"
+    # If PROJECT_REPO is set by --repo parameter,
+    if [[ -n "${PROJECT_REPO}" ]]; then
+      build_args="${build_args} --build-arg PROJECT_REPO=${PROJECT_REPO}"
+    else
+      if [[ -n ${!this_project_repo} ]]; then
+        build_args="${build_args} --build-arg PROJECT_REPO=${!this_project_repo}"
+      fi
     fi
 
     if [[ "$project" == "requirements" ]]; then
@@ -116,7 +124,8 @@
         if [[ -n ${!this_wheels} ]]; then
           build_args="${build_args} --build-arg WHEELS=${!this_wheels}"
         else
-          build_args="${build_args} --build-arg WHEELS=${REGISTRY_URI}requirements:${VERSION}-${REQUIREMENTS_TAGGED_PROJECT_REF}-${DISTRO}${requirements_extra_tags:-}"
+          #build_args="${build_args} --build-arg WHEELS=${REGISTRY_URI}requirements:${VERSION}-${REQUIREMENTS_TAGGED_PROJECT_REF}-${DISTRO}${requirements_extra_tags:-}"
+          build_args="${build_args} --build-arg WHEELS=${WHEELS}"
         fi
 
         #Add profiles argument if <project>_profiles env var is defined
@@ -152,7 +161,12 @@
 
     #Prepare tag
     local this_extra_tags="${project}_extra_tag"
-    tag="${REGISTRY_URI}${projectname}:${VERSION}-${TAGGED_PROJECT_REF}-${DISTRO}${!this_extra_tags}"
+    if [[ -n ${VERSION} ]]; then
+      mytag="${VERSION}-${TAGGED_PROJECT_REF}-${DISTRO}${!this_extra_tags}"
+    else
+      mytag="${TAGGED_PROJECT_REF}-${DISTRO}${!this_extra_tags}"
+    fi
+    tag="${REGISTRY_URI}${projectname}:${mytag}"
 
     docker_build_cmd="docker build --network=host ${default_project_extra_build_args} ${build_args} --tag $tag ."
 }
@@ -166,11 +180,11 @@
 # dockerhub user. Example: "docker.io/openstackhelm"
 REGISTRY_URI=${REGISTRY_URI:-"172.17.0.1:5000/openstackhelm/"}
 # The image tag used.
-VERSION=${VERSION:-"latest"}
+#VERSION=${VERSION:-"latest"}
 # The openstack branch to build, if no per project branch is given.
 OPENSTACK_VERSION=${OPENSTACK_VERSION:-"master"}
-# Sepcify OS distribution
-DISTRO=${DISTRO:-"ubuntu_focal"}
+# Specify OS distribution
+DISTRO=${DISTRO:-"ubuntu_jammy"}
 # extra build arguments for the base image. See loci's dockerfiles for
 # arguments that could be used for example.
 base_extra_build_args=${base_extra_build_args:-"--force-rm --pull --no-cache"}
@@ -220,6 +234,7 @@
 monasca_api_pip_packages=${monasca_api_pip_packages:-"influxdb cassandra-driver sqlalchemy"}
 masakari_profiles=${masakari_profiles:-"'masakari'"}
 masakari_monitors_profiles=${masakari_monitors_profiles:-"'masakari-monitors'"}
+
 ####################
 # Action starts here
 ####################
@@ -232,63 +247,21 @@
 get_loci
 fetch_loci_version
 
-# The BASE_IMAGE provided by the user may require
-# building and re-use LOCI.
-# Test if BASE_IMAGE should be built from LOCI dockerfiles.
-case ${BASE_IMAGE} in
-    ubuntu)
-        #Mark the need to build image from LOCI Dockerfiles
-        BUILD_IMAGE="yes"
-        #Makes sure the name of the distro is consistent with other OSH-images.
-        DISTRO="ubuntu_focal"
-        ;;
-    leap15)
-        BUILD_IMAGE="yes"
-        DISTRO="suse_15"
-        ;;
-    centos)
-        BUILD_IMAGE="yes"
-        DISTRO="centos_7"
-        ;;
-    debian)
-        BUILD_IMAGE="yes"
-        DISTRO="debian"
-        ;;
-    *)
-        BUILD_IMAGE="no"
-        DISTRO="${DISTRO}"
-        ;;
-esac
-
 if [[ "${BUILD_IMAGE}" == "yes" ]]; then
-    LOCI_ARG_FROM="${REGISTRY_URI}base:${VERSION}-${DISTRO}"
+    #LOCI_ARG_FROM="${REGISTRY_URI}base:${VERSION}-${DISTRO}"
+    LOCI_ARG_FROM="${REGISTRY_URI}base:${DISTRO}"
     build_loci_base_image $LOCI_ARG_FROM
-    docker push $LOCI_ARG_FROM
-else
-    fetch_base_image
-    LOCI_ARG_FROM="${BASE_IMAGE}"
+    [[ "${BASE_IMAGE_ONLY}" == "yes" ]] && exit 0 || true
+    #docker push $LOCI_ARG_FROM
 fi
+LOCI_ARG_FROM="${REGISTRY_URI}base:${DISTRO}"
 
-BUILD_PROJECTS=${BUILD_PROJECTS:-'requirements keystone heat barbican glance cinder monasca_api neutron neutron_sriov nova horizon senlin magnum ironic manila tacker'}
-projects=( ${BUILD_PROJECTS} )
+BUILD_PROJECTS=${BUILD_PROJECTS:-'requirements keystone heat barbican glance cinder monasca_api neutron neutron_sriov nova horizon senlin magnum ironic'}
 
 pushd ${LOCI_SRC_DIR}
-    # The first project should be requirements, if requirements is built.
-    # This one should not be run in parallel.
-    if [[ "${projects[0]}" == "requirements" ]]; then
-        get_project_image_build_arguments ${projects[0]}
-        eval "${docker_build_cmd}"
-        docker push ${tag}
-        unset projects[0]
-    fi
-    # clear action from previous install (can be in dev local builds)
-    truncate -s 0 ${LOG_PREFIX}actions
-    # Run the rest of the projects with parallel
-    for project in ${projects[@]}; do
-        get_project_image_build_arguments $project
-        echo "${docker_build_cmd} && docker push ${tag}" >> ${LOG_PREFIX}actions
-    done
-    parallel --group -a ${LOG_PREFIX}actions
+    get_project_image_build_arguments ${BUILD_PROJECTS}
+    echo "${docker_build_cmd}" > ${LOG_PREFIX}actions
+    time bash ${LOG_PREFIX}actions
 popd
 
 # Return to user folder
